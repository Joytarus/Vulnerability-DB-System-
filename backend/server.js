const express = require('express');
const cors = require('cors');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const GhostContentAPI = require('@tryghost/content-api');
const { PrismaClient } = require('@prisma/client');
const morgan = require('morgan');
const axios = require('axios');
require("dotenv").config();

const app = express();
const prisma = new PrismaClient();
const SECRET_KEY = process.env.SECRET_KEY;
const NVD_API_KEY = process.env.NVD_API_KEY;
const contentAPI = new GhostContentAPI({
    url: 'https://demo.ghost.io/ghost/api/content/posts',
    key: '22444f78447824223cefc48062',
    version: 'v5.0'
});

app.use(cors());
app.use(express.json());
app.use(morgan('tiny'));

app.get('/', (req, res) => {
    res.send('Vulnerability DB API');
});


app.get('/search', async(req, res) => {
    const searchTerm = req.query.term.toLowerCase();

    let matchedVulnerabilities = [];

    // Fetch from external API
    try {
        const response = await axios.get('https://services.nvd.nist.gov/rest/json/cves/2.0', {
            params: {
                query: searchTerm
            }
        });
        matchedVulnerabilities = response.data; // or whatever the structure is
    } catch (error) {
        console.error("Error fetching vulnerabilities from external API:", error);
    }

    // Combine with your database search if necessary:
    matchedVulnerabilities = matchedVulnerabilities.concat(
        vulnerabilities.filter(vuln =>
            vuln.cve.id.toLowerCase().includes(searchTerm) ||
            vuln.cve.descriptions[0].value.toLowerCase().includes(searchTerm)
        )
    );

    const matchedBlogs = blogs.filter(blog =>
        blog.title.toLowerCase().includes(searchTerm) ||
        blog.content.toLowerCase().includes(searchTerm)
    );

    const matchedResources = resources.filter(resource =>
        resource.title.toLowerCase().includes(searchTerm) ||
        resource.description.toLowerCase().includes(searchTerm)
    );

    res.json({
        vulnerabilities: matchedVulnerabilities,
        blogs: matchedBlogs,
        resources: matchedResources
    });
});

app.use((err, req, res, next) => {
    if (err instanceof SyntaxError && err.status === 400 && 'body' in err) {
        res.status(400).send({ error: 'Bad Request' });
    } else {
        next(err);
    }
});

app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(err.status || 500).send({ error: err.message || 'Internal Server Error' });
});

const PORT = 3000;
app.listen(PORT, () => {
    console.log(`Server started on http://localhost:${PORT}`);
});