const express = require('express');
const axios = require('axios');
const cors = require('cors');
const { PrismaClient } = require('@prisma/client');

const app = express();
const prisma = new PrismaClient();

app.use(cors());
app.use(express.json());

// Hardcoded data for blogs and educational resources
const blogs = [{
        id: 1,
        title: 'Explore the Future of Security',
        summary: 'Introducing Microsoft Security Copilot and discussing challenges faced by cybersecurity professionals.',
        link: 'https://www.microsoft.com/security/blog',
        date: '2023-01-10'
    },
    {
        id: 2,
        title: 'Top Cybersecurity Trends In 2023',
        summary: 'Coverage on the global cost of cybercrimes and average cost of a corporate data breach as reported by IBM.',
        link: 'https://www.forbes.com',
        date: '2023-01-15'
    },
    {
        id: 3,
        title: 'Online Security and 2023 Attacks Landscape',
        summary: 'A reading list about online security and the increased sophistication of cyberattacks in 2023.',
        link: 'https://blog.cloudflare.com',
        date: '2023-01-20'
    },
    {
        id: 4,
        title: 'Six of the Best Cybersecurity Blogs',
        summary: 'Insight into top cybersecurity threats and trends for 2023, including cloud vulnerabilities and data breaches.',
        link: 'https://www.isaca.org',
        date: '2023-01-25'
    },
];

const resources = [{
        id: 1,
        title: 'Cybrary',
        description: 'Free online cyber security training and certification',
        link: 'https://www.cybrary.it/'
    },
    {
        id: 2,
        title: 'SANS Cyber Aces Online',
        description: 'Free online cyber security courses',
        link: 'https://www.sans.org/cyber-security-courses/cyber-aces-online/'
    },
    {
        id: 3,
        title: 'Open Security Training',
        description: 'Free online security training courses',
        link: 'http://opensecuritytraining.info/'
    },
    {
        id: 4,
        title: 'Hack The Box',
        description: 'Online platform to test and advance your skills in penetration testing and cyber security',
        link: 'https://www.hackthebox.eu/'
    },
    {
        id: 5,
        title: 'PortSwigger Web Security Academy',
        description: 'Free online web security training from the creators of Burp Suite',
        link: 'https://portswigger.net/web-security'
    },
    {
        id: 6,
        title: 'OWASP Top Ten Project',
        description: 'A list of the top ten most critical web application security risks',
        link: 'https://owasp.org/Top10/'
    },
    {
        id: 7,
        title: 'OWASP Juice Shop',
        description: 'An intentionally insecure web application for security training',
        link: 'https://owasp.org/www-project-juice-shop/'
    },
    {
        id: 8,
        title: 'OWASP WebGoat',
        description: 'An intentionally insecure web application for security training',
        link: 'https://owasp.org/www-project-webgoat/'
    },
    {
        id: 9,
        title: 'OWASP Security Shepherd',
        description: 'An intentionally insecure web application for security training',
        link: 'https://owasp.org/www-project-security-shepherd/'
    },
    {
        id: 10,
        title: 'OWASP Security Knowledge Framework',
        description: 'A tool for building, sharing, and maintaining knowledge bases',
        link: 'https://owasp.org/www-project-security-knowledge-framework/'
    },
    {
        id: 11,
        title: 'OWASP Broken Web Applications Project',
        description: 'A collection of vulnerable web applications that is distributed on a Virtual Machine',
        link: 'https://owasp.org/www-project-broken-web-applications/'
    },
    {
        id: 12,
        title: 'OWASP Web Security Testing Guide',
        description: 'A comprehensive guide to testing the security of web applications and web services',
        link: 'https://owasp.org/www-project-web-security-testing-guide/'
    },
    {
        id: 13,
        title: 'OWASP Mobile Security Testing Guide',
        description: 'A comprehensive manual for mobile app security testing and reverse engineering',
        link: 'https://owasp.org/www-project-mobile-security-testing-guide/'
    },
    {
        id: 14,
        title: 'OWASP Application Security Verification Standard',
        description: 'A standard for performing application-level security verifications',
        link: 'https://owasp.org/www-project-application-security-verification-standard/'
    },
    {
        id: 15,
        title: 'OWASP Application Security Requirements Verification Standard',
        description: 'A standard for performing application-level security requirements verifications',
        link: 'https://owasp.org/www-project-application-security-requirements-verification-standard/'
    },
    {
        id: 16,
        title: 'OWASP Automated Threats to Web Applications',
        description: 'A list of automated threats against Web Applications',
        link: 'https://owasp.org/www-project-automated-threats-to-web-applications/'
    },
];

app.get('/', (req, res) => {
    res.send('Vulnerability DB API');
});

app.post('/vulnerabilities', async(req, res) => {
    const { title, description, softwareName, severity, version, identificationNumber, mitigationSteps } = req.body;

    if (!title || !description || !softwareName || !severity || !version || !identificationNumber || !mitigationSteps) {
        return res.status(400).send({ message: 'All fields are required.' });
    }

    try {
        const vulnerabilityReport = await prisma.vulnerabilityReport.create({
            data: {
                title,
                description,
                softwareName,
                severity,
                version,
                identificationNumber,
                mitigationSteps,
            },
        });

        res.status(200).send({ message: 'Vulnerability reported successfully!', report: vulnerabilityReport });
    } catch (error) {
        console.error('Error creating vulnerability report:', error);
        res.status(500).send({ message: 'Error reporting vulnerability.' });
    }
});

app.get('/search', async(req, res) => {
    const searchTerm = req.query.q;

    // Validate the search term
    if (!searchTerm) {
        return res.status(400).json({ message: 'A search query is required.' });
    }

    // Function to filter blogs and resources
    const filterItems = (items, term) => {
        return items.filter(item => {
            return Object.values(item).some(value =>
                value.toString().toLowerCase().includes(term.toLowerCase())
            );
        });
    };

    // Filter blogs and resources
    const filteredBlogs = filterItems(blogs, searchTerm);
    const filteredResources = filterItems(resources, searchTerm);

    // Search vulnerabilities using the NVD API
    // Update the API endpoint and parameters according to the latest API documentation
    const vulnerabilitiesPromise = axios.get(`https://services.nvd.nist.gov/rest/json/cves/2.0`, {
        params: {
            keyword: searchTerm, // Make sure 'keyword' is a valid parameter
            resultsPerPage: 10
        }
    }).then(response => {
        // Update the path according to the actual response structure
        return { vulnerabilities: response.data.result.CVE_Items || [] };
    }).catch(error => {
        console.error("Error fetching vulnerabilities:", error);
        return { vulnerabilities: [] };
    });

    try {
        let [vulnerabilitiesResult] = await Promise.all([vulnerabilitiesPromise]);
        let searchResults = {
            blogs: filteredBlogs,
            resources: filteredResources,
            ...vulnerabilitiesResult
        };
        res.json(searchResults);
    } catch (error) {
        console.error("Error in search:", error);
        res.status(500).json({ message: 'An error occurred during the search.' });
    }
});



// Handle errors
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(err.status || 500).send({ error: err.message || 'Internal Server Error' });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});