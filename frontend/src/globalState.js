import { reactive, toRefs } from 'vue';
import { getAuth, onAuthStateChanged } from 'firebase/auth';

export const useGlobalState = () => {
    const state = reactive({
        isAuthenticated: false,
        user: null,
        showLoginModal: false,
        showRegisterModal: false
    });

    // Firebase authentication state observer
    const initAuthState = () => {
        const auth = getAuth();
        onAuthStateChanged(auth, (user) => {
            if (user) {
                // User is signed in
                state.isAuthenticated = true;
                state.user = {
                    uid: user.uid,
                    email: user.email,
                    // Add other user details you need
                };
                // Optionally, you could store the user in localStorage here as well
            } else {
                // User is signed out
                state.isAuthenticated = false;
                state.user = null;
                // Clear any user-related information from localStorage if needed
            }
        });
    };

    // Call the observer to start listening for auth state changes
    initAuthState();

    const toggleLoginModal = () => {
        console.log("Toggling Login Modal");
        state.showLoginModal = !state.showLoginModal;
    };

    const closeLoginModal = () => {
        console.log("Closing Login Modal");
        state.showLoginModal = false;
    };

    const toggleRegisterModal = () => {
        console.log("Toggling Register Modal");
        state.showRegisterModal = !state.showRegisterModal;
    };

    const closeRegisterModal = () => {
        console.log("Closing Register Modal");
        state.showRegisterModal = false;
    };

    return {
        ...toRefs(state),
        toggleLoginModal,
        toggleRegisterModal,
        closeLoginModal,
        closeRegisterModal
    };
};